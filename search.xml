<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Atrace视角剖析安卓系统跟踪</title>
      <link href="/2021/06/09/atrace/"/>
      <url>/2021/06/09/atrace/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>一个跟踪范围涵盖了用户空间（App/Framewrok/native），内核空间（Kernel），设备厂商私有服务（Vendor）的系统级别跟踪工具。它不仅集成了内核ftrace的event-tracepoint静态跟踪能力，还集成了ftrace的function_graph动态跟踪能力，并支撑着perfetto，systrace等性能分析工具的底层跟踪能力</p><h1 id="关键使用"><a href="#关键使用" class="headerlink" title="关键使用"></a>关键使用</h1><p>输入命令atrace –help，查看帮助文档</p><pre><code>walleye:/ # atrace --helpusage: atrace [options] [categories...]options include: -a appname   enable app-level tracing for a comma separated list of cmdlines; * is a wildcard matching any process -b N      use a trace buffer size of N KB -c       trace into a circular buffer -f filename   use the categories written in a file as space-separated          values in a line -k fname,...  trace the listed kernel functions -n       ignore signals -s N      sleep for N seconds before tracing [default 0] -t N      trace for N seconds [default 5] -z       compress the trace dump --async_start  start circular trace and return immediately --async_dump  dump the current contents of circular trace buffer --async_stop  stop tracing and dump the current contents of circular          trace buffer --stream    stream trace to stdout as it enters the trace buffer          Note: this can take significant CPU time, and is best          used for measuring things that are not affected by          CPU performance, like pagecache usage. --list_categories         list the available tracing categories -o filename   write the trace to the specified file instead          of stdout.</code></pre><h2 id="a-appname"><a href="#a-appname" class="headerlink" title="-a appname"></a>-a appname</h2><ul><li>它使用系统属性debug.atrace.app_%d表明有哪些app需要跟踪，使用debug.atrace.app_number属性表明跟踪的app数量</li><li>如果需要设置跟踪多个app，可以用逗号进行间隔。如果需要设置跟踪所有app则设置为*</li><li>另外一种跟踪app等价的方式是，首先设置ro.atrace.core.services属性为app的名称，然后atrace启动的时候，添加core_services的命令行参数</li></ul><p><img src="https://bytedance.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjNmMmRjMmEyMmRkYTg5MTU0MjI3N2E3ZTA5MTBkYWRfV09FVk9lMDJXbVBxZEoyM2dwZ1BBQXNiYnZOT3BjWXVfVG9rZW46Ym94Y25lMVNBbjhyU3JHeEpGRTYzNjZSVllPXzE2MjM5ODg0NzY6MTYyMzk5MjA3Nl9WNA" alt></p><p><img src="https://bytedance.feishu.cn/space/api/box/stream/download/asynccode/?code=NzI4ZWMxNTllNjk4Yjk4OTQzOTA1MTk1MTM1MTFkYWNfN25taXdxT3IwWVBrZUV6Y1dEd1pEZEJ4akpnUnhaME9fVG9rZW46Ym94Y25Nd1pTNW1nak5LVVBvclNEYzloM0VjXzE2MjM5ODg0NzY6MTYyMzk5MjA3Nl9WNA" alt></p><p><img src="https://bytedance.feishu.cn/space/api/box/stream/download/asynccode/?code=NjNiYzk2MmZkODljZTZiM2I4NDQyNGZiNTk1NTNhNWZfWVBYeFY1emUzQUVqaXc0R1pBV2k3NEZTUXdpMDhTZnhfVG9rZW46Ym94Y25FazFXTjRhd0JGOUJCd1UyWGhTNmFkXzE2MjM5ODg0NzY6MTYyMzk5MjA3Nl9WNA" alt></p><h2 id="b-buffer-size"><a href="#b-buffer-size" class="headerlink" title="-b buffer size"></a>-b buffer size</h2><ul><li>它的单位是k，默认启动设置为2M。</li><li>文件节点是跟踪目录下的buffer_size_kb，表示的是每一个cpu独立的内存大小，总的占用内存大小等于buffer size乘以cpu个数，可通过buffer_total_size_kb文件节点获取。</li><li>值得注意的是这些跟着cpu的内存是在内核分配的，而且是一次性占用，如果此时用free查看可知，atrace启动的时候，free的内存占用值会一次性降低。</li></ul><h2 id="c"><a href="#c" class="headerlink" title="-c"></a>-c</h2><ul><li>它采集使用的是内核的ring buffer机制，内核ring buffer有两个参数，一种是满了就停止，一种是循环写入，新的内容会覆盖旧的内容，默认是采用循环写入的方式。</li><li>值得注意的是，同步启动的时候atrace使用满了就停止的模式，而异步启动的时候即使不使用-c选项，也会开启循环写入的模式</li></ul><h2 id="k"><a href="#k" class="headerlink" title="-k"></a>-k</h2><p>它使用ftrace的function_graph动态跟踪能力，需要内核打开编译选项进行支持</p><h2 id="s-t"><a href="#s-t" class="headerlink" title="-s/-t"></a>-s/-t</h2><p>它们主要的区别是适用于不同的业务场景。-s是先延时一段时间什么都不做才开始采集，而-t是先将采集开启，等待一段时间后结束。</p><h2 id="–async-start-–async-dump-–async-stop"><a href="#–async-start-–async-dump-–async-stop" class="headerlink" title="–async_start/–async_dump/–async_stop"></a>–async_start/–async_dump/–async_stop</h2><p>atrace的异步启动方式，适合于异步启动的业务场景</p><h2 id="–stream"><a href="#–stream" class="headerlink" title="–stream"></a>–stream</h2><ul><li>它是流模式，跟正常的同步异步启动的区别，一个是读取的节点不一样，同步/异步启动读取的是trace文件节点,而流模式读取的是trace_pipe文件节点。</li><li>trace文件节点是静态的，每次读取需要暂停生产者，并且读取完需要清空trace，可以支持多个进程读取完再统一清空。而trace_pipe文件节点是消费型的，进程读取之后就消费掉了，但是优势是不需要暂停生产者，且atrace默认将获得的数据打印到控制台更方便调试。</li><li>一些基于atrace能力的采集工具例如perfetto就重点优化了这里，通过读取每个cpu的trace_pipe原始数据实现长时间采集的能力。</li></ul><p><img src="https://bytedance.feishu.cn/space/api/box/stream/download/asynccode/?code=NGY0YjE4Mjk2Yjg0NjdiZTJhMGE4ZmQ4ZDAyOTA5MDRfZzRnbEpQS29walc0b3R6VndFUEFsZVBUaE5OanNkdnlfVG9rZW46Ym94Y25SeWM2bG0xSE9nTXNBN3JiMFlsREFnXzE2MjM5ODg0NzY6MTYyMzk5MjA3Nl9WNA" alt></p><h2 id="–list-categories"><a href="#–list-categories" class="headerlink" title="–list_categories"></a>–list_categories</h2><p>它能够列举出用户空间，内核空间，vendor服务支持的所有种类，将各种各样的跟踪能力抽象为种类的概念</p><p><img src="https://bytedance.feishu.cn/space/api/box/stream/download/asynccode/?code=YjAyZDhhZmUyNmE1MjFiMTgyMjE1MzZjNjhiMTUyNTZfMVZNeFhCSHdkYXptR0RvUjNjbmxTd1NhTzZXYTZXTTJfVG9rZW46Ym94Y250QzluRkgyR1o3Z2pkVnVla09TV3RkXzE2MjM5ODg0NzY6MTYyMzk5MjA3Nl9WNA" alt></p><h1 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h1><p><img src="https://bytedance.feishu.cn/space/api/box/stream/download/asynccode/?code=NTE0MGU3NmQ4ZjJlODYxYmFhMTJkMjBiYzg4ZjhjNjdfUkpmMVNSMUZsMmlQR3F4ejB3dE45U1Y1VFpucFhNMWJfVG9rZW46Ym94Y253bTV3UndrQlZ4NVZMWUlWc2trTEFjXzE2MjM5ODg0NzY6MTYyMzk5MjA3Nl9WNA" alt></p><ul><li>atrace通过控制安卓属性，以及sysfile文件节点，将静态打点以及动态跟踪的能力抽象成‘种类’的概念来统一管理，从层级上来看，则抽象出了UserspaceTracing，KernelTracing, VendorTracing三种层级。</li><li>UserspaceTracing，采集数据中带B,E,S,F代表的就是应用空间同步/异步api的打点，在systrace/perfetto中表现为slice，而带C的则表示为counter，具体的格式除了开头的由内核写入的pid，tgid, 进程名字等信息外，均由每个线程每个函数自己定义，并在ftrace的function中统一表现为trace_marker，具体的应用层打点api如下</li></ul><pre><code>App-api:    beginAsyncSection(String methodName, int cookie)    beginSection(String sectionName)    endAsyncSection(String methodName, int cookie)    endSection()    setCounter(String counterName, long counterValue)framework-api:    atrace_begin(ATRACE_TAG, name)    atrace_end(ATRACE_TAG)native-api:    #define ATRACE_BEGIN(name) atrace_begin(ATRACE_TAG, name)    #define ATRACE_END() atrace_end(ATRACE_TAG)</code></pre><ul><li>KernelTracing则利用埋入内核各个子系统的event-tracepoint来进行控制，事件相关的事件格式可以从事件节点的format获取, 在event目录下也可以查看每个子系统支持event-tracepoint的情况，atrace源代码中带有REQ的路径是必须能够具备写入权限的节点，是一种内核种类能够被使能最基本最关键的文件节点</li><li>VendorTracing通过三个binder接口控制hal服务预先注册好的方法，触发vendor角度的跟踪</li></ul><pre><code>listCategories() generates (vec&lt;TracingCategory&gt; categories)enableCategories() generates (vec&lt;string&gt; categories)  (Status status)disableAllCategories() generates (Status status)</code></pre><ul><li>根据内核版本区分不同的路径为/sys/kernel/debug/tracing 或者 /sys/kernel/tracing</li><li>值得注意的是，atrace开始采集之后会丢失很少一部分数据因为每个cpu的追踪使能是独立的，如果一个任务从一个cpu迁移到另外一个cpu执行，trace有可能会出现begin和end不匹配，所以atrace启动之后会立刻清空trace这个文件节点</li><li>trace_event_clock_sync: parent_ts 是作为systrace等网页解析的时间起点，如果没有这一行的话，就会采用第一个事件的时间作为起点</li><li>Atarce由于采集实现，最大的问题是不支持长采集（长时间采集），后续基于atrace能力的采集框架例如perfetto重新实现了这一套采集，通过读取每个cpu的trace_pipe_raw,在不暂停采集数据生产者的情况下，通过线程异步和缓存实现了长采集</li></ul><h1 id="Ftrace补充"><a href="#Ftrace补充" class="headerlink" title="Ftrace补充"></a>Ftrace补充</h1><p>Ftrace文件能力说明，路径为/sys/kernel/tracing/或者/sys/kernel/debug/tracing/（根据内核版本区分）</p><pre><code>walleye:/sys/kernel/debug/tracing # lsREADME      buffer_total_size_kb instances saved_cmdlines set_event_pid trace_options  tracing_thresh available_events current_tracer options  saved_cmdlines_size trace     trace_pipe    available_tracers events  per_cpu    saved_tgids     trace_clock  tracing_cpumask  buffer_size_kb  free_buffer     printk_formats set_event      trace_marker tracing_on# echo 0 &gt; tracing_on : quick way to disable tracing# echo 1 &gt; tracing_on : quick way to re-enable tracing Important files: trace                        - The static contents of the buffer                         To clear the buffer write into this file: echo &gt; trace trace_pipe                - A consuming read to see the contents of the buffer current_tracer        - function and latency tracers available_tracers        - list of configured tracers for current_tracer buffer_size_kb        - view and modify size of per cpu buffer buffer_total_size_kb - view total size of all cpu buffers trace_clock                -change the clock used to order events    local:  Per cpu clock but may not be synced across CPUs   global:  Synced across CPUs but slows tracing down.   counter:  Not a clock, but just an increment   uptime:  Jiffy counter from time of boot    perf:  Same clock that perf events use trace_marker                - Writes into this file writes into the kernel buffer tracing_cpumask        - Limit which CPUs to trace instances                - Make sub-buffers with: mkdir instances/foo                         Remove sub-buffer with rmdir trace_options                - Set format or modify how tracing happens                         Disable an option by adding a suffix &#39;no&#39; to the                         option name saved_cmdlines_size        - echo command number in here to store comm-pid list events/                - Directory containing all trace event subsystems:   enable                - Write 0/1 to enable/disable tracing of all events events/&lt;system&gt;/        - Directory containing all trace events for &lt;system&gt;:   enable                - Write 0/1 to enable/disable tracing of all &lt;system&gt;                         events   filter                - If set, only events passing filter are traced events/&lt;system&gt;/&lt;event&gt;/        - Directory containing control files for                         &lt;event&gt;:   enable                - Write 0/1 to enable/disable tracing of &lt;event&gt;   filter                - If set, only events passing filter are traced   trigger                - If set, a command to perform when event is hit          Format: &lt;trigger&gt;[:count][if &lt;filter&gt;]          trigger: traceon, traceoff              enable_event:&lt;system&gt;:&lt;event&gt;              disable_event:&lt;system&gt;:&lt;event&gt;                  stacktrace          example: echo traceoff &gt; events/block/block_unplug/trigger              echo traceoff:3 &gt; events/block/block_unplug/trigger              echo &#39;enable_event:kmem:kmalloc:3 if nr_rq &gt; 1&#39; &gt; \                 events/block/block_unplug/trigger          The first disables tracing every time block_unplug is hit.          The second disables tracing the first 3 times block_unplug is hit.          The third enables the kmalloc event the first 3 times block_unplug           is hit and has value of greater than 1 for the &#39;nr_rq&#39; event field.          Like function triggers, the counter is only decremented if it          enabled or disabled tracing.          To remove a trigger without a count:           echo &#39;!&lt;trigger&gt; &gt; &lt;system&gt;/&lt;event&gt;/trigger          To remove a trigger with a count:           echo &#39;!&lt;trigger&gt;:0 &gt; &lt;system&gt;/&lt;event&gt;/trigger          Filters can be ignored when removing a trigger.</code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pixel-安卓系统刷机指南</title>
      <link href="/2021/06/09/pixel-flash/"/>
      <url>/2021/06/09/pixel-flash/</url>
      
        <content type="html"><![CDATA[<h1 id="拉取aosp代码"><a href="#拉取aosp代码" class="headerlink" title="拉取aosp代码"></a>拉取aosp代码</h1><pre><code>repo init -u https://android.googlesource.com/platform/manifest -b android-10.0.0_r33-b 后面的参数可见 tag and buildrepo sync -j8repo start master --all</code></pre><h1 id="下载厂商私有驱动，芯片相关bin"><a href="#下载厂商私有驱动，芯片相关bin" class="headerlink" title="下载厂商私有驱动，芯片相关bin"></a>下载厂商私有驱动，芯片相关bin</h1><ul><li><a href="https://source.android.com/setup/start/build-numbers#source-code-tags-and-builds" target="_blank" rel="noopener">查找tag对应的build</a>如下</li></ul><p><img src="https://bytedance.feishu.cn/space/api/box/stream/download/asynccode/?code=ODZmMjEyMzc1MzZjNGJiYjcxNGU5NDgzNjQ4YTgwMDNfOHBOS002Qmc3dXdSNDFnWXo2eTVQTHoybmFrSktBYVBfVG9rZW46Ym94Y25XUXpacENEc0xCZ0xLQm1tZXpURjFiXzE2MjM5NDkxNDA6MTYyMzk1Mjc0MF9WNA" alt></p><ul><li><a href="https://developers.google.com/android/drivers#walleyeqq2a.200405.005" target="_blank" rel="noopener">根据build找到hardware compoent</a></li></ul><p><img src="https://bytedance.feishu.cn/space/api/box/stream/download/asynccode/?code=ZmI5NWE4ZGVhMzlmY2Q0YjE4NjU2OTM2MjAwOTRlYTZfaE9USFI2Qm84cTBuQ1F0ZjdNOXM4QjJtTno4RGpEanpfVG9rZW46Ym94Y25CSW9QNFB6QXhzOUtQR1NSWHVDQ09lXzE2MjM5NDkxNDA6MTYyMzk1Mjc0MF9WNA" alt></p><ul><li>下载hardware compoent的两个link，解压生成两个脚本</li><li>进入aosp根目录，执行解压的两个脚本，并检查是否生成vendor目录，最终会生成vendor.img</li></ul><h1 id="解锁手机"><a href="#解锁手机" class="headerlink" title="解锁手机"></a>解锁手机</h1><ul><li>手机连接上google的网络</li><li>开发者选项打开oem解锁</li></ul><p><img src="https://bytedance.feishu.cn/space/api/box/stream/download/asynccode/?code=Y2FkOTQ1MGNmYzI4NjhiZWJlMTc4M2MyYTFkOTVlZmVfQkJtV3BDdnBCaWVINFVBbXpPN1RtR0tRQ01TamtkV09fVG9rZW46Ym94Y25yOXJMSTdJTnZnRGFnbHh6R2VtbkRjXzE2MjM5NDkxNDA6MTYyMzk1Mjc0MF9WNA" alt></p><pre><code>adb reboot fastboot 让手机进入bootloaderfastboot flashing unlock</code></pre><h1 id="编译刷写"><a href="#编译刷写" class="headerlink" title="编译刷写"></a>编译刷写</h1><h2 id="mac本地编译刷写"><a href="#mac本地编译刷写" class="headerlink" title="mac本地编译刷写"></a>mac本地编译刷写</h2><pre><code>Lunch xxxMake -j8adb reboot fastboot 让手机进入bootloaderCd aosp根目录fastboot flashall -w</code></pre><h2 id="服务器编译成dist包进行刷写"><a href="#服务器编译成dist包进行刷写" class="headerlink" title="服务器编译成dist包进行刷写"></a>服务器编译成dist包进行刷写</h2><ul><li><code>make dist -j8</code>，得到编译产物为aosp_walleye-img-eng.wenda.zip</li><li><a href="https://developers.google.com/android/images#walleye" target="_blank" rel="noopener">下载factory软件</a>得到flash-all.sh，并修改脚本为fastboot -w update aosp_walleye-img-eng.wenda.zip</li></ul><p><img src="https://bytedance.feishu.cn/space/api/box/stream/download/asynccode/?code=MDdiMzY3N2Y1YmQ4M2VkOWNiMTUwYjU1ZTE4Y2FkYmVfVFBlNmFUcWJHVXd5REFQN3RwTHJXcW1uMVFyZm91c2dfVG9rZW46Ym94Y25hSFV5N1dybEpkYmtZTkpOQlM0SzJjXzE2MjM5NDkxNDA6MTYyMzk1Mjc0MF9WNA" alt></p><ul><li>adb reboot fastboot让手机进入bootloader</li><li>执行flash-all.sh刷写手机</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
